plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = "${delbase_ver}-${mc_version}"
group = "${grouping}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${file_name}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    // mappings channel: 'official', version: '1.18.2'
    //noinspection GroovyAssignabilityCheck
    mappings channel: project.map_type, version: project.map_type_version

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'delbase'

            mods {
                delbase {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'delbase'

            mods {
                delbase {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'delbase'

            mods {
                delbase {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        data {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'delbase', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                delbase {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency

    // Guidebook
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_ver}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_ver}")
    // Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}
// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "delbase",
                "Specification-Vendor"    : "dephoegonisle",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "dephoegonisle",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
mixin {
    add sourceSets.main, 'mixins.delbase.refmap.json'
    config 'mixins.delbase.json'
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
